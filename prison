//Define a class Prisoner that includes:
//- Name
//- ID
//- Time remaining in prison
//Define a class Prison that includes:
//- Name
//- Array of prisoners
//
//   Define the following functions:
//- Given a Prison output the name of the prison and then all the information about
//the prisoners in it.
//- Create a function and sort the prisoners in ascending order by the time they have left to serve.

#include <iostream>
#include <cstring>
using namespace std;

class Prisoner {

private: // пропартита на об екта
    char *name;
    int id;
    int remaining_time;

    void copy(const Prisoner &other) // константна ред. към обекти = конст. реф към всичко // приема само един обект
    {
        name = new char[strlen(other.name)+1];
        strcpy(name,other.name);
        this->id = other.id;
        this->remaining_time = other.remaining_time;

    }

    void del()
    {
        delete[] name;
    }
public:

    Prisoner(){
        name = "";
        id = 0;
        remaining_time = 0;
    }

    Prisoner(const char* _name, const int& _id, const int& _remaining_time)
    {
        if(!_name) { //zashtita sreshtu nullptr

            _name ="";
        }

        name = new char[strlen(_name)+1];
        strcpy(name,_name);
        this->id = _id;
        this->remaining_time = _remaining_time;


    }

    bool operator > (const Prisoner &other) {

        return this->remaining_time > other.remaining_time;
    }

    Prisoner(const Prisoner &other) // заделяме само памет за char и обекти
    {

        copy(other);
    }


    ~Prisoner(){

        del();
    } //   iztrivane na dinamichno zadelena pamet

    Prisoner& operator=(const Prisoner &other){  //TUK GOVORIM SAMO ZA ADRESI

        if( this != &other){
            del();
            copy(other);
        }

        return  *this;
    }


    int get_remaining_time() const {
        return this->remaining_time;
    }

//    char* get_name() const {
//
//        return this->name;
//    }

    void print() const {

        cout<<this->id;
        cout<<this->name;
        cout<<this->remaining_time;
    }
};

class Prison {
private:
    char* prison_name;
    Prisoner *prisonerArr;
    size_t capacity;
    size_t size;
    void copy(const Prison &other){

        prison_name = new char[strlen(other.prison_name)+1];
        strcpy(prison_name,other.prison_name);

    }
    void del()
    {
        delete[] prison_name;
    }
    void resize() {
        capacity *=2;
        Prisoner *temp = new Prisoner[capacity]; // масив от обекти - извиква се дефаутния конст
        for (int i = 0; i < size; ++i) {

            temp[i] = this->prisonerArr[i]; // изиква се оператор равно

        }

        delete[] prisonerArr;
        prisonerArr = temp; //изиква се оператор равно
        // тъй като е пойнтер и е дефиниран в блока на функ. ще се изтрие сам след като завърши функ.
    }


public:

    Prison()
    {
        prison_name = "";
        capacity = 0;
        size = 0;
    }

    Prison(char* _prison_name, size_t _capacity, size_t _size){

        _prison_name = new char[strlen(prison_name)+1];
        strcpy(_prison_name,prison_name);
    }
    Prison(const Prison  &other ) {

        copy(other);
    }

    Prison& operator=(const Prison &other) {
        if (this != &other) {
            del();
            copy(other);
        }
        return *this;
    }
    ~Prison() {

        del();
    }

    void insert_prisoner(const Prisoner _prisonerArr) {

        if(size == capacity)
        {
            resize();
        }
        prisonerArr[size] = _prisonerArr;
        size++;

    }
    void sort_array() {

        for (int i = 0; i <size-1 ; ++i) {
            size_t min_index = i;
            for (int j = i+1; j <size ; ++j) {
                if (this->prisonerArr[min_index] > this->prisonerArr[j])
                {
                    min_index = j;
                }
            }

            Prisoner temp = prisonerArr[min_index];
            prisonerArr[min_index] = prisonerArr[i];
            prisonerArr[i] = temp;
        }


   }

    void get_prison_info() const {
        cout<< this->prison_name;
        for (int i = 0; i < size ; ++i) {
            prisonerArr[i].print();
        }

    }
};
int main() {

    Prisoner p1;
   cout<< p1.get_remaining_time();
    return 0;
}
